#lang racket
(require racket/string)
(provide filter-by-word sublist)

(define (filter-by-word strings word)
  (if (eq? strings empty)
      (list)
      (if (member word (string-split (first strings)))
          (append (list (first strings)) (filter-by-word (rest strings) word))
          (filter-by-word (rest strings) word)
      )
   )
 )

(define (sublist sub lst)
  (if (member (first sub) lst)
      (if (checkRest sub (member (first sub) lst))
          (- (length lst) (length (member (first sub) lst)))
          (if (eq? (sublist sub (rest(member (first sub) lst))) #f)
              #f
              (+  (- (length lst) (length (member (first sub) lst)))
                  (sublist sub (rest(member (first sub) lst)))
                  1
              )
          )
      )
      #f
  )
)

(define (checkRest sub lst)
  (if (empty? sub)
      #t
      (if (empty? lst)
         #f
         (if (eq? (first sub) (first lst))
             (checkRest (rest sub) (rest lst))
             #f
         )
      )
   )
)



